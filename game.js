// –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const countriesDB = [
    {
        name: "–§—Ä–∞–Ω—Ü–∏—è",
        facts: [
            "–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–µ–π –∫—É—Ö–Ω–µ–π",
            "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è",
            "–°—Ç–æ–ª–∏—Ü–∞ - –≥–æ—Ä–æ–¥ –ª—é–±–≤–∏",
            "–†–æ–¥–∏–Ω–∞ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º–∞",
            "–ò–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–∏–º–∏ –≤–∏–Ω–∞–º–∏ –∏ —Å—ã—Ä–∞–º–∏"
        ]
    },
    {
        name: "–Ø–ø–æ–Ω–∏—è",
        facts: [
            "–°—Ç—Ä–∞–Ω–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–ª–Ω—Ü–∞",
            "–ò–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–∏–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
            "–†–æ–¥–∏–Ω–∞ —Å—É—à–∏ –∏ –∞–Ω–∏–º–µ",
            "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–∞ –§—É–¥–∑–∏",
            "–°—Ç–æ–ª–∏—Ü–∞ - –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞"
        ]
    }
];

const rebusesDB = [
    {
        difficulty: 1,
        puzzle: "üåûüåõ‚ûï",
        solution: "–¥–µ–Ω—å –∏ –Ω–æ—á—å",
        hints: ["–í—Ä–µ–º—è —Å—É—Ç–æ–∫", "24 —á–∞—Å–∞", "–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏"]
    },
    {
        difficulty: 2,
        puzzle: "üåçüíß",
        solution: "–∑–µ–º–Ω–æ–π —à–∞—Ä",
        hints: ["–ü–ª–∞–Ω–µ—Ç–∞", "–ì–ª–æ–±—É—Å", "–¢—Ä–µ—Ç—å—è –æ—Ç –°–æ–ª–Ω—Ü–∞"]
    }
];

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
class Timer {
    constructor(duration, onTick, onComplete) {
        this.duration = duration;
        this.remaining = duration;
        this.onTick = onTick;
        this.onComplete = onComplete;
    }

    start() {
        this.interval = setInterval(() => {
            this.remaining--;
            this.onTick(this.remaining);
            if (this.remaining <= 0) {
                this.stop();
                this.onComplete();
            }
        }, 1000);
    }

    stop() {
        clearInterval(this.interval);
    }
}

class PointSystem {
    constructor() {
        this.totalScore = 0;
        this.level = 1;
        this.levelsThreshold = [0, 100, 250, 500, 1000, 2000];
    }

    addPoints(points) {
        this.totalScore += points;
        this.checkLevelUp();
    }

    checkLevelUp() {
        while (this.level < this.levelsThreshold.length && this.totalScore >= this.levelsThreshold[this.level]) {
            this.level++;
            console.log(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è ${this.level}!`);
        }
    }

    getMultiplier() {
        return 1 + (this.level - 1) * 0.1;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
let tg = window.Telegram.WebApp;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initApp() {
    tg.ready();
    tg.expand();

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    if (tg.colorScheme === 'dark') {
        document.body.classList.add('dark-theme');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
    tg.MainButton.setText('–ù–∞—á–∞—Ç—å –∏–≥—Ä—É');
    tg.MainButton.show();
    tg.MainButton.onClick(() => app.startRandomGame());

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≥—Ä—ã
    window.onbeforeunload = () => {
        tg.sendData(JSON.stringify({
            score: app.currentGame.pointSystem.totalScore,
            level: app.currentGame.pointSystem.level
        }));
    };
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–≥—Ä
class Game {
    constructor(name) {
        this.name = name;
        this.score = 0;
        this.pointSystem = new PointSystem();
    }

    updateScore(points) {
        const adjustedPoints = Math.round(points * this.pointSystem.getMultiplier());
        this.score += adjustedPoints;
        this.pointSystem.addPoints(adjustedPoints);
    }
}

class GuessCountry extends Game {
    constructor() {
        super("–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É");
        this.currentCountry = null;
        this.revealedFacts = 0;
    }

    startNewRound(country) {
        this.currentCountry = country;
        this.revealedFacts = 0;
    }

    revealNextFact() {
        if (this.revealedFacts < this.currentCountry.facts.length) {
            this.revealedFacts++;
            return this.currentCountry.facts[this.revealedFacts - 1];
        }
        return null;
    }

    makeGuess(guess) {
        if (guess.toLowerCase() === this.currentCountry.name.toLowerCase()) {
            const points = 100 - (this.revealedFacts * 15);
            this.updateScore(Math.max(points, 10));
            return true;
        }
        return false;
    }
}

class RebusChallenge extends Game {
    constructor() {
        super("–†–µ–±—É—Å-—á–µ–ª–ª–µ–Ω–¥–∂");
        this.currentRebus = null;
        this.hintsUsed = 0;
    }

    startNewRound(rebus) {
        this.currentRebus = rebus;
        this.hintsUsed = 0;
    }

    useHint() {
        if (this.hintsUsed < this.currentRebus.hints.length) {
            this.hintsUsed++;
            return this.currentRebus.hints[this.hintsUsed - 1];
        }
        return null;
    }

    solvePuzzle(solution) {
        if (solution.toLowerCase() === this.currentRebus.solution.toLowerCase()) {
            const basePoints = this.currentRebus.difficulty * 100;
            const points = basePoints * (1 - (this.hintsUsed * 0.25));
            this.updateScore(Math.max(points, 10));
            return true;
        }
        return false;
    }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
class GameProgress {
    constructor() {
        this.load();
    }

    save() {
        const data = {
            totalScore: app.currentGame.pointSystem.totalScore,
            level: app.currentGame.pointSystem.level
        };
        localStorage.setItem('gameProgress', JSON.stringify(data));
    }

    load() {
        const savedData = localStorage.getItem('gameProgress');
        if (savedData) {
            const data = JSON.parse(savedData);
            return data;
        }
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class GameApp {
    constructor() {
        this.countryGame = new GuessCountry();
        this.rebusGame = new RebusChallenge();
        this.currentGame = null;
        this.timer = null;
        this.progress = new GameProgress();

        this.gameContainer = document.getElementById('gameContent');
        this.startButton = document.getElementById('startGame');
        this.guessInput = document.getElementById('guessInput');
        this.submitButton = document.getElementById('submitGuess');
        this.feedback = document.getElementById('feedback');
        this.timerDisplay = document.getElementById('timer');
        this.scoreDisplay = document.getElementById('score');
        this.levelDisplay = document.getElementById('level');

        this.initEventListeners();
        this.loadProgress();
    }
 // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Mini App
        if (window.Telegram && window.Telegram.WebApp) {
            initApp();
        }
    }    

 initEventListeners() {
        this.startButton.addEventListener('click', () => this.startRandomGame());
        this.submitButton.addEventListener('click', () => this.makeGuess());
    }

    loadProgress() {
        const savedData = this.progress.load();
        if (savedData) {
            this.countryGame.pointSystem.totalScore = savedData.totalScore;
            this.countryGame.pointSystem.level = savedData.level;
            this.rebusGame.pointSystem.totalScore = savedData.totalScore;
            this.rebusGame.pointSystem.level = savedData.level;
            this.updateStats();
        }
    }

    startRandomGame() {
        if (Math.random() < 0.5) {
            this.startCountryGame();
        } else {
            this.startRebusGame();
        }
    }

    startCountryGame() {
        const country = this.getRandomCountry();
        this.currentGame = this.countryGame;
        this.countryGame.startNewRound(country);
        this.displayGame("–£–≥–∞–¥–∞–π —Å—Ç—Ä–∞–Ω—É", country.facts[0]);
        this.startTimer(60, () => this.revealNextFact(country));
    }

    startRebusGame() {
        const rebus = this.getRandomRebus();
        this.currentGame = this.rebusGame;
        this.rebusGame.startNewRound(rebus);
        this.displayGame("–†–µ–±—É—Å-—á–µ–ª–ª–µ–Ω–¥–∂", rebus.puzzle);
        this.startTimer(30);
    }

    displayGame(title, content) {
        this.gameContainer.innerHTML = `
            <h2>${title}</h2>
            <p>${content}</p>
        `;
    }

    startTimer(duration, onTick) {
        if (this.timer) this.timer.stop();
        this.timer = new Timer(duration, 
            (remaining) => {
                this.timerDisplay.textContent = remaining;
                if (onTick) onTick(remaining);
            },
            () => this.endGame("–í—Ä–µ–º—è –≤—ã—à–ª–æ!", false)
        );
        this.timer.start();
    }

    revealNextFact(country) {
        const fact = this.countryGame.revealNextFact();
        if (fact) {
            this.gameContainer.innerHTML += `<p>${fact}</p>`;
        }
    }

    makeGuess() {
        const guess = this.guessInput.value;
        let result;

        if (this.currentGame instanceof GuessCountry) {
            result = this.countryGame.makeGuess(guess);
        } else if (this.currentGame instanceof RebusChallenge) {
            result = this.rebusGame.solvePuzzle(guess);
        }

        if (result) {
            this.endGame("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", true);
        } else {
            this.feedback.textContent = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }

        this.guessInput.value = '';
        this.updateStats();
    }

    endGame(message, isCorrect = false) {
        this.timer.stop();
        this.feedback.textContent = message;
        this.updateStats();

        if (isCorrect) {
            this.submitButton.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            setTimeout(() => {
                this.startRandomGame();
                this.feedback.textContent = '';
                this.submitButton.disabled = false; // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
            }, 2000);
        } else {
            this.startButton.disabled = false;
        }

        this.progress.save();
    }

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –≤ Telegram
        if (window.Telegram && window.Telegram.WebApp) {
            tg.MainButton.setText(`–°—á–µ—Ç: ${this.currentGame.pointSystem.totalScore}`);
        }
    }

    updateStats() {
        this.scoreDisplay.textContent = this.currentGame.pointSystem.totalScore;
        this.levelDisplay.textContent = this.currentGame.pointSystem.level;
    }

    getRandomCountry() {
        return countriesDB[Math.floor(Math.random() * countriesDB.length)];
    }

    getRandomRebus() {
        return rebusesDB[Math.floor(Math.random() * rebusesDB.length)];
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new GameApp();
